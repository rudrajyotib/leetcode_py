from unittest import TestCase

from medium.algorithm.valid_sudoku import Solution


class TestSolution(TestCase):
    def test_is_valid_sudoku_set1(self):
        solution = Solution()
        self.assertTrue(solution.isValidSudoku(board=
                                                    [["5", "3", ".", ".", "7", ".", ".", ".", "."]
                                                   , ["6", ".", ".", "1", "9", "5", ".", ".", "."]
                                                   , [".", "9", "8", ".", ".", ".", ".", "6", "."]
                                                   , ["8", ".", ".", ".", "6", ".", ".", ".", "3"]
                                                   , ["4", ".", ".", "8", ".", "3", ".", ".", "1"]
                                                   , ["7", ".", ".", ".", "2", ".", ".", ".", "6"]
                                                   , [".", "6", ".", ".", ".", ".", "2", "8", "."]
                                                   , [".", ".", ".", "4", "1", "9", ".", ".", "5"]
                                                   , [".", ".", ".", ".", "8", ".", ".", "7", "9"]]
                                               ))

    def test_is_valid_sudoku_set2(self):
        solution = Solution()
        self.assertFalse(solution.isValidSudoku(board=
                                                    [["5", "3", ".", ".", "7", ".", ".", ".", "."]
                                                   , ["6", ".", ".", "1", "9", "5", ".", ".", "."]
                                                   , [".", "9", "8", ".", ".", ".", ".", "6", "."]
                                                   , ["8", ".", ".", ".", "6", ".", ".", ".", "3"]
                                                   , ["4", ".", ".", "8", ".", "3", ".", ".", "1"]
                                                   , ["7", ".", ".", ".", "2", ".", ".", ".", "6"]
                                                   , [".", "6", ".", ".", ".", ".", "2", "8", "."]
                                                   , [".", ".", ".", "4", "1", "9", ".", ".", "6"]
                                                   , [".", ".", ".", ".", "8", ".", ".", "7", "9"]]
                                               ))

    def test_is_valid_sudoku_set3(self):
        solution = Solution()
        self.assertFalse(solution.isValidSudoku(board=
                                                    [["5", "3", ".", ".", "7", ".", ".", ".", "."]
                                                   , ["6", ".", ".", "1", "9", "5", ".", ".", "."]
                                                   , [".", "9", "8", ".", ".", ".", ".", "6", "."]
                                                   , ["8", ".", ".", ".", "6", ".", ".", ".", "3"]
                                                   , ["4", ".", ".", "8", ".", "3", ".", ".", "1"]
                                                   , ["7", ".", ".", ".", "2", ".", ".", ".", "6"]
                                                   , [".", "6", ".", ".", ".", ".", "9", "8", "."]
                                                   , [".", ".", ".", "4", "1", "9", ".", ".", "5"]
                                                   , [".", ".", ".", ".", "8", ".", ".", "7", "9"]]
                                               ))
